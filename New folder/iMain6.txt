/*
Project Name : DX BALL Remastered ;
*/

# include "iGraphics.h"

/*
SCREEN
*/

#define screenWidth 1000
#define screenHeight 600
char  name[50] = "DX Ball Remastered";

/*
Background
*/

/*
Ball
*/

char ballImage[50] = "Image\\DXBall20.bmp";
int ballPosition_X = (int)screenWidth / 2;
int ballPosition_Y = 19;
int ballWidth = 20;
int ballHeight = 20;
int ballSpeed_X = 5;
int ballSpeed_Y = 7;
int ballDirection = 1;
int ballPoint = 0;


/*
Paddle
*/
char paddleImage[50] = "Image\\Paddle.bmp";
int paddlePosition_X = (int)screenWidth / 2 - 150 / 2;
int paddlePosition_Y = 0;
int paddleWidth = 150;
int paddleHeight = 19;
int paddleSpeed = 20;

/////// paddle2 

char paddleImage2[50] = "Image\\Paddle.bmp";
int paddlePosition2_X = (int)screenWidth / 2 - 150 / 2;
int paddlePosition2_Y = 581;
int paddleWidth2 = 150;
int paddleHeight2 = 19;



/*
Brick
*/

char brickImage[50] = "Image\\brick.bmp";
char brickImageRed[50] = "Image\\brick_red.bmp";

int brickWidth = 50;
int brickHeight = 25;
int brickGap_X;
int brickGap_Y;
int brickFirst_X = 0;
int brickFirst_Y = 500;
#define brickRow  15
#define brickCol  20

struct Brick
{
	int brickPosition_X;
	int brickPosition_Y;
	bool showBrick;
}brick[brickRow][brickCol];




//////////         Loop Parameter
//////////
int i, j, k, l, m, n;

//////// restart 
bool gameOn = false;


/////////
////////
bool gameOver = false;
char textTest[50] = "Say Who gives a fuck";
#define PI 3.1415926535898
int degree = 0;
int v = 8;

////////
/////// Power up 

////// speedball
char powerUp[50] = "image\\speedBall.bmp";
char fireballImage[50] = "image\\fireBall.bmp";
int speedBallX = 100;
int speedBallY = 500;
bool speedBallActive = true;
bool sb;
bool fireBall;

////// paddleBig
char paddleBig[50] = "image\\paddleBig.bmp";
char bigPaddle[50] = "image\\bigPaddle.bmp";
int paddleBigX = brick[0][0].brickPosition_X;
int paddleBigY = brick[0][0].brickPosition_X;
bool paddleBigActive = true;
bool pb;

////// paddleMini
char paddleMini[50] = "image\\paddleMini.bmp";
char miniPaddle[50] = "image\\miniPaddle.bmp";
int paddleMiniX = 400;
int paddleMiniY = 500;
bool paddleMiniActive = true;
bool pm;

//// shoot

char shoot[50] = "image\\shoot.bmp";
char bulletimage[50] = "image\\bullet.bmp";
int shootX = 700;
int shootY = 500;
char redPaddle[50] = "image\\redPaddle.bmp";
bool redpaddleActive;

struct
{
	int bulletX;
	int bulletY;
	int bulletCount;
	bool bulletShow;

}bullet[5000];

int bulletHeight = 25;
int bulletWidth = 5;
int bulletSpeed = 8;

int noOfbullets = 0;
bool shootActive = true;
bool st;
bool st2;
bool st3;


///// extraLife
char extraLife[50] = "image\\extraLife.bmp";
int extraLifeX = 700;
int extraLifeY = 500;
bool extraLifeActive = true;
bool el;



///// life

char lifeImage[50] = "image\\Paddlelife.bmp";
int life = 3;

bool die = false;

//// Level
int level = 1;
int levelCount1;
int levelCount2;
int levelCount3;
int levelCount4;
bool levelStarted1;
bool levelStarted2;
bool levelStarted3;
bool levelStarted4;

////// timer

int ballTimer;
int levelTimer;

///// timeLevel

int second = 60;


//// page 

int page = 1; 
char firstPage[50] = "image\\firstPage.bmp";
char spinBall[9][50] = { "image\\Background\\spinBall(1).bmp","image\\Background\\spinBall(2).bmp","image\\Background\\spinBall(3).bmp","image\\Background\\spinBall(4).bmp","image\\Background\\spinBall(5).bmp","image\\Background\\spinBall(6).bmp","image\\Background\\spinBall(7).bmp","image\\Background\\spinBall(8).bmp","image\\Background\\spinBall(9).bmp" };
int spinBallIndex = 0;

int firstPageX = 0;
int firstPageY = 0;

int spinBallX = 400;
int spinBallY = 50;

int mposx, mposy;



////////////////////////////////////////////////////////////////////////////////////////#@!#@!#@!#!@#!@#!@#!#@$@#@#$@#$@#$
//$@#$@#$@#$@#$@#$@#$@#$@#$@#$@#$@#$@#$ function prototype

void restart();
void gameOverPage();

void timeControl()
{
	second--;
	iText(0, 500, (char*)second);
	printf("%d", second);
}

void timeLevel()
{
	if (second <= 30)
	{
		gameOver = true;
		gameOverPage();
	}
}

void brickActive()
{
	for (i = 0; i < brickRow; i++)
	{
		for (j = 0; j < brickCol; j++)
		{
			brick[i][j].showBrick = true;
		}
	}
}
void bulletActive()
{
	for (i = 0; i < 5000; i++)
	{
		bullet[i].bulletShow = true;
	}
}

void speedBallActivem()
{
	if (ballSpeed_X < 0 && ballSpeed_Y < 0)
	{
		ballSpeed_X = -15;
		ballSpeed_Y = -15;
	}
	if (ballSpeed_X < 0 && ballSpeed_Y > 0)
	{
		ballSpeed_X = -15;
		ballSpeed_Y = 15;
	}
	if (ballSpeed_X > 0 && ballSpeed_Y < 0)
	{
		ballSpeed_X = 15;
		ballSpeed_Y = -15;
	}
	if (ballSpeed_X > 0 && ballSpeed_Y > 0)
	{
		ballSpeed_X = 15;
		ballSpeed_Y = 15;
	}

	v = 20;
	speedBallActive = false;
	fireBall = true;
	sb = false;
}

void paddleBigActivem()
{
	printf("I m in");
	paddleWidth = 220;
	paddleBigActive = false;
	pb = false;
}
void paddleMiniActivem()
{
	printf("I m in");
	paddleWidth = 80;
	paddleMiniActive = false;
	pm = false;
}
void bulletCollision()
{
	for (k = 0; k < noOfbullets; k++)
	{
		for (i = 0; i < brickRow; i++)
		{
			for (j = 0; j < brickCol; j++)
			{
				if (bullet[k].bulletY + bulletHeight >= brick[i][j].brickPosition_Y && brick[i][j].showBrick == true && bullet[k].bulletShow == true && st3)
				{

					if (bullet[k].bulletX >= brick[i][j].brickPosition_X && bullet[k].bulletX <= brick[i][j].brickPosition_X + brickWidth)
					{
						brick[i][j].showBrick = false;
						bullet[k].bulletShow = false;

						++levelCount2;
						printf("LvelCount2 %d\n", levelCount2);

						if (levelCount2 == 90)
						{
							level = 3;
							levelStarted3 = true;
							die = false;
							restart();
						}

						break;
					}

				}

			}

		}
	}
}
void bulletMove()
{
	for (i = 0; i < noOfbullets; i++)
	{
		bullet[i].bulletY += bulletSpeed;
	}
	bulletCollision();
}

void bulletShow()
{
	for (i = 0; i < noOfbullets; i++)
	{
		if (bullet[i].bulletShow)
		{
			iShowBMP(bullet[i].bulletX, bullet[i].bulletY, bulletimage);
		}
		//bulletMove();
	}

}

void bulletPosition()
{
	++noOfbullets;
	if (noOfbullets != 0)
	{
		bullet[noOfbullets - 1].bulletX = paddlePosition_X;
		bullet[noOfbullets - 1].bulletY = paddlePosition_Y + 5;
	}
	else
	{
		bullet[noOfbullets].bulletX = paddlePosition_X;
		bullet[noOfbullets].bulletY = paddlePosition_Y + 5;
	}
}

void shootActivem()
{
	if (st2 && st3)
	{
		bulletPosition();
	}
}
void extraLifeActivem()
{
	life++;
	extraLifeActive = false;
	el = false;
}
void speedBallActiveWm()
{
	if (speedBallY <= 19 && speedBallY > 0)
	{
		if (speedBallX >= paddlePosition_X && speedBallX <= paddlePosition_X + paddleWidth)
		{
			if (sb)
			{
				speedBallActivem();
			}
		}
	}

}

void paddleBigActiveWm()
{
	if (paddleBigY <= 19 && paddleBigY > 0)
	{
		if (paddleBigX >= paddlePosition_X && paddleBigX <= paddlePosition_X + paddleWidth)
		{
			if (pb)
			{
				paddleBigActivem();
			}
		}
	}

}

void paddleMiniActiveWm()
{
	if (paddleMiniY <= 19 && paddleMiniY > 0)
	{
		if (paddleMiniX >= paddlePosition_X && paddleMiniX <= paddlePosition_X + paddleWidth)
		{
			if (pm)
			{
				paddleMiniActivem();
			}
		}
	}

}
void shootActiveWm()
{
	if (shootY <= 19 && shootY > 0)
	{
		if (shootX >= paddlePosition_X && shootX <= paddlePosition_X + paddleWidth)
		{
			if (st)
			{
				redpaddleActive = true;
				st3 = true;
			}
		}
	}
}
void extraLifeActiveWm()
{
	if (extraLifeY <= 19 && extraLifeY > 0)
	{
		if (extraLifeX >= paddlePosition_X && extraLifeX <= paddlePosition_X + paddleWidth)
		{
			if (el)
			{
				extraLifeActivem();
			}
		}
	}

}

//void powerUpsm(int X, int Y)
//{
//	if (Y <= 19)
//	{
//		if (X >= paddlePosition_X && X <= paddlePosition_X + paddleWidth)
//		{
//			if (sb)
//			{
//				speedBallActivem();
//			}
//			if (pb)
//			{
//				paddleBigActivem();
//			}
//			if (st)
//			{
//				shootActivem();
//			}
//			if (el)
//			{
//				extraLifeActivem();
//			}
//		}
//	}
//
//}

void powerUps()
{
	if (brick[0][0].showBrick == false && speedBallActive)
	{
		iShowBMP(speedBallX, speedBallY, powerUp);
		speedBallY = speedBallY - 5;
		sb = true;
		speedBallActiveWm();
	}
	if (brick[2][1].showBrick == false && paddleBigActive)
	{
		iShowBMP(paddleBigX, paddleBigY, paddleBig);
		paddleBigY = paddleBigY - 5;
		pb = true;
		paddleBigActiveWm();
	}
	if (brick[0][3].showBrick == false && paddleMiniActive)
	{
		iShowBMP(paddleMiniX, paddleMiniY, paddleMini);
		paddleMiniY = paddleMiniY - 5;
		pm = true;
		paddleMiniActiveWm();
	}
	if (brick[0][1].showBrick == false && shootActive)
	{
		iShowBMP(shootX, shootY, shoot);
		shootY = shootY - 5;
		st = true;
		st2 = true;
		shootActiveWm();
		//powerUpsm(shootX, shootY);
	}
	if (brick[0][2].showBrick == false && extraLifeActive)
	{
		iShowBMP(extraLifeX, extraLifeY, extraLife);
		extraLifeY = extraLifeY - 5;
		el = true;
		extraLifeActiveWm();
	}



}


void lifeCount()
{
	if (life == 4)
	{
		iShowBMP(610, 570, lifeImage);
		iShowBMP(700, 570, lifeImage);
		iShowBMP(790, 570, lifeImage);
		iShowBMP(880, 570, lifeImage);
		printf("life 4 \n");
		//iShowBMP(970, 570, lifeImage);
	}
	else if (life == 3)
	{
		iShowBMP(700, 570, lifeImage);
		iShowBMP(790, 570, lifeImage);
		iShowBMP(880, 570, lifeImage);

	}
	else if (life == 2)
	{
		iShowBMP(790, 570, lifeImage);
		iShowBMP(880, 570, lifeImage);

	}
	else if (life == 1)
	{
		iShowBMP(880, 570, lifeImage);
		printf("life 1 \n");
	}
}

void gameOverPage()
{
	iShowBMP(0, 0, "image\\Game_Over.bmp");
}

void restart()
{
	if (die)
	{
		life--;
	}

	PlaySound("restart.wav", NULL, SND_ASYNC);
	ballPosition_X = (int)screenWidth / 2;

	ballPosition_Y = paddleHeight;

	ballSpeed_X = 5;
	ballSpeed_Y = 7;
	v = 10;

	paddlePosition_X = (int)screenWidth / 2 - paddleWidth / 2;
	printf("xxx%d", paddlePosition_X);
	paddlePosition_Y = 0;
	paddlePosition2_X = (int)screenWidth / 2 - paddleWidth / 2;
	paddlePosition2_Y = 581;
	paddleWidth = 150;

	gameOn = false;

	fireBall = false;
	redpaddleActive = false;

	st2 = false;
	st3 = false;

	if (life == 0)
	{
		gameOver = true;
		gameOverPage();
	}
}




/*
BrickManagement
*/

void brickPattern()
{


	for (i = 0, brickGap_Y = 0; i < brickRow; i++, brickGap_Y = brickGap_Y - brickHeight)
	{
		for (j = 0, brickGap_X = 0; j < brickCol; j++, brickGap_X = brickGap_X + brickWidth)
		{

			brick[i][j].brickPosition_X = brickFirst_X + brickGap_X;
			brick[i][j].brickPosition_Y = brickFirst_Y + brickGap_Y;

			if (brick[i][j].showBrick == true)
			{
				if (level == 1)
				{
					iShowBMP(brick[i][j].brickPosition_X, brick[i][j].brickPosition_Y, brickImageRed);
				}
				if (level == 2)
				{
					iShowBMP(brick[i][j].brickPosition_X, brick[i][j].brickPosition_Y, brickImage);
				}
				if (level == 3)
				{

					iShowBMP(brick[i][j].brickPosition_X, brick[i][j].brickPosition_Y, brickImage);
				}
				if (level == 4)
				{

					iShowBMP(brick[i][j].brickPosition_X, brick[i][j].brickPosition_Y, brickImageRed);
				}

				//iFilledRectangle(brick[i][j].brickPosition_X, brick[i][j].brickPosition_Y, 150, 30);
			}

		}
	}
}


////////////
//////////// Batman Design 
void batDesign()
{
	brick[0][8].showBrick = false;
	brick[0][9].showBrick = false;
	brick[0][10].showBrick = false;
	brick[0][11].showBrick = false;
	brick[1][8].showBrick = false;
	brick[1][11].showBrick = false;
	for (i = 2; i < brickRow; i++)
	{
		for (j = 0; j < i - 1; j++)
		{
			brick[i][j].showBrick = false;
		}
	}
	for (i = 2; i < (brickRow - 1); i++)
	{
		for (j = brickCol; j > brickCol - i; j--)
		{
			brick[i][j].showBrick = false;
		}

	}

	for (i = 10; i <= 19; i++)
	{
		brick[14][i].showBrick = false;
	}
	//for (i = 0; i < 4; i++)
	//{
	//	brick[11][14 + i].showBrick = false;
	//}
	//for (i = 0; i < 3; i++)
	//{
	//	brick[10][15 + i].showBrick = false;
	//}
	////brick[3][11].showBrick = false;
	////brick[3][12].showBrick = false;
	////brick[2][12].showBrick = false;

}

//////smileface
void smileDesign()
{
	if (levelStarted2)
	{
		brickActive();
		levelStarted2 = false;
	}
	brick[3][6].showBrick = false;
	brick[3][7].showBrick = false;
	brick[4][6].showBrick = false;
	brick[4][7].showBrick = false;
	brick[3][12].showBrick = false;
	brick[3][13].showBrick = false;
	brick[4][12].showBrick = false;
	brick[4][13].showBrick = false;  //smile
	brick[9][4].showBrick = false;
	brick[10][5].showBrick = false;
	brick[11][6].showBrick = false;
	brick[12][7].showBrick = false;
	brick[13][8].showBrick = false;
	brick[13][9].showBrick = false;
	brick[13][10].showBrick = false;
	brick[13][11].showBrick = false;
	brick[13][12].showBrick = false;
	brick[12][13].showBrick = false;
	brick[11][14].showBrick = false;
	brick[10][15].showBrick = false;

}

///// doublePaddle design
void dpDesign()
{
	if (levelStarted3)
	{
		brickActive();
		levelStarted3 = false;
	}
	for (i = 0; i < brickRow; i++)
	{
		brick[i][0].showBrick = false;
		brick[i][1].showBrick = false;
	}
	for (i = 0; i < brickRow; i++)
	{
		brick[i][brickCol - 1].showBrick = false;
		brick[i][brickCol].showBrick = false;
	}

	brick[0][8].showBrick = false;
	brick[0][9].showBrick = false;
	brick[0][10].showBrick = false;
	brick[0][11].showBrick = false;
	brick[0][12].showBrick = false;
	brick[1][9].showBrick = false;
	brick[1][10].showBrick = false;
	brick[1][11].showBrick = false;
	brick[2][10].showBrick = false;
}

void timelevelDesign()
{
	if (levelStarted4)
	{
		brickActive();
		levelStarted4 = false;
	}
}

//////////////
//////////// Ball Direction 
void ballDirectionDefine()
{

	ballPosition_X += ballSpeed_X;
	ballPosition_Y += ballSpeed_Y;

}
////////
/////////							collision
/////////////
void collision()
{

	for (i = 0; i < brickRow; i++)
	{
		for (j = 0; j < brickCol; j++)
		{
			if (ballPosition_X + ballWidth >= brick[i][j].brickPosition_X && ballPosition_X <= brick[i][j].brickPosition_X + brickWidth && brick[i][j].showBrick == true)
			{


				ballPoint = ballPosition_Y + 10;


				if (ballPoint >= brick[i][j].brickPosition_Y &&  ballPoint <= brick[i][j].brickPosition_Y + brickHeight)
				{
					printf("2nd %d\t", ballDirection);
					brick[i][j].showBrick = false;
					PlaySound("brickSound.wav", NULL, SND_ASYNC);


					ballSpeed_Y = -ballSpeed_Y;
					if (level == 1)
					{
						++levelCount1;
						if (levelCount1 == 5)
						{
							level = 2;
							levelStarted2 = true;
							die = false;
							restart();
						}
					}

					if (level == 2)
					{
						++levelCount2;
						printf("LvelCount2 %d\n", levelCount2);
						if (levelCount2 == 20)
						{
							level = 3;
							levelStarted3 = true;
							die = false;
							restart();
						}
					}

					if (level == 3)
					{
						++levelCount3;
						if (levelCount3 == 10)
						{
							level = 4;
							levelStarted4 = true;
							die = false;
							restart();
						}
					}

					break;
				}

			}
			else if (ballPosition_Y + ballHeight >= brick[i][j].brickPosition_Y && ballPosition_Y <= brick[i][j].brickPosition_Y + brickHeight  && brick[i][j].showBrick == true)
			{


				//ballPoint = ballPosition_X + 10;
				if (ballPosition_X + 10 >= brick[i][j].brickPosition_X && ballPosition_X + 10 <= brick[i][j].brickPosition_X + brickWidth)
				{
					printf("1st %d\t", ballDirection);
					brick[i][j].showBrick = false;
					PlaySound("brickSound.wav", NULL, SND_ASYNC);


					ballSpeed_X = -ballSpeed_X;

					if (level == 1)
					{
						++levelCount1;
						{
							if (levelCount1 == 3)
							{
								level = 2;
								levelStarted2 = true;
								die = false;
								restart();
							}
						}
					}
					if (level == 2)
					{
						++levelCount2;
						if (levelCount2 == 20)
						{
							level = 3;
							levelStarted3 = true;
							die = false;
							restart();
						}
					}

					if (level == 3)
					{
						++levelCount3;
						if (levelCount3 == 10)
						{
							level = 4;
							levelStarted4 = true;
							die = false;
							restart();
						}
					}

					break;
				}

			}
		}

	}
}

void screenBorder()
{
	// Direction Changing 



	if (ballPosition_X <= 0)						// Left Border 
	{

		ballSpeed_X = -ballSpeed_X;
		PlaySound("borderSound.wav", NULL, SND_ASYNC);

	}
	else if (ballPosition_X >= screenWidth - ballWidth)  //Right Border 
	{

		ballSpeed_X = -ballSpeed_X;
		PlaySound("borderSound.wav", NULL, SND_ASYNC);
	}

	else if (ballPosition_Y >= screenHeight - ballHeight && level != 3) //Upper Border
	{
		ballSpeed_Y = -ballSpeed_Y;
		PlaySound("borderSound.wav", NULL, SND_ASYNC);
	}

}

void paddle()
{
	if (ballPosition_Y <= -20)										//Paddle
	{
		die = true;
		restart();
	}
	if (ballPosition_Y <= 19)
	{

		ballPoint = ballPosition_X + 10;

		if (ballPoint >= paddlePosition_X && ballPoint <= paddlePosition_X + paddleWidth)
		{
			if (paddleWidth == 150)
			{
				degree = (paddlePosition_X + paddleWidth - ballPosition_X) + 15;
			}
			if (paddleWidth == 220)
			{
				degree = (paddlePosition_X + paddleWidth - ballPosition_X) - 30;
			}
			if (paddleWidth == 80)
			{
				degree = (paddlePosition_X + paddleWidth - ballPosition_X) + 50;
			}

			PlaySound("paddleSound.wav", NULL, SND_ASYNC);

			ballSpeed_X = (int)v*cos(degree*PI / 180);
			ballSpeed_Y = (int)v*sin(degree*PI / 180);

			printf("x =%d ", ballSpeed_X);
			printf("y =%d ", ballSpeed_Y);
			printf("degree = %d", degree);

		}

	}
}

void paddle2()
{

	if (ballPosition_Y >= 600 + 20)										//Paddle2
	{
		die = true;
		restart();
	}
	if (ballPosition_Y >= 600 - 39)
	{
		ballPoint = ballPosition_X;

		if (ballPoint >= paddlePosition2_X && ballPoint <= paddlePosition2_X + paddleWidth2)
		{
			printf("%d", paddlePosition2_X);
			degree = (paddlePosition2_X + paddleWidth2 - ballPosition_X) + 15;

			ballSpeed_X = (int)v*cos(degree*PI / 180);
			ballSpeed_Y = (int)v*sin(degree*PI / 180);
			ballSpeed_Y = -ballSpeed_Y;
		}

	}


}

/*
BallMovement
*/

void ballMovememnt()
{
	if (gameOn)
	{
		ballDirectionDefine();

		collision();

		screenBorder();

		paddle();

		if (level == 3)
		{
			paddle2();
		}
	}

}






/*
function iDraw() is called again and again by the system.
*/
void iDraw()
{
	//place your drawing codes here
	iClear();

	if (page == 1)
	{
		iShowBMP(firstPageX, firstPageY, firstPage);
	}
	if (page == 2)
	{
		if (level == 1)
		{
			batDesign();
		}
		if (level == 2)
		{
			powerUps();
			smileDesign();
			bulletShow();
			bulletMove();
		}
		if (level == 3)
		{
			dpDesign();
			iShowBMP2(paddlePosition2_X, paddlePosition2_Y, paddleImage2, 0);
		}

		if (level == 4)
		{
			iResumeTimer(levelTimer);
			timeLevel();
		}

		lifeCount();


		if (gameOver)
		{
			gameOverPage();
		}

		if (fireBall)
		{
			iShowBMP(ballPosition_X, ballPosition_Y, fireballImage);
		}
		else
		{
			iShowBMP2(ballPosition_X, ballPosition_Y, ballImage, 0);
		}

		//iFilledCircle(ballPosition_X, ballPosition_Y, 15);

		if (paddleWidth == 150)
		{
			iShowBMP2(paddlePosition_X, paddlePosition_Y, paddleImage, 0);
		}
		if (paddleWidth == 220)
		{
			iShowBMP2(paddlePosition_X, paddlePosition_Y, bigPaddle, 0);
		}
		if (paddleWidth == 80)
		{
			iShowBMP2(paddlePosition_X, paddlePosition_Y, miniPaddle, 0);
		}
		if (redpaddleActive)
		{
			iShowBMP2(paddlePosition_X, paddlePosition_Y, redPaddle, 0);
		}

		brickPattern();
	}

}


/*
function iMouseMove() is called when the user presses and drags the mouse.
(mx, my) is the position where the mouse pointer is.
*/
void iMouseMove(int mx, int my)
{
	//place your codes here
}

/*
function iMouse() is called when the user presses/releases the mouse.
(mx, my) is the position where the mouse pointer is.
*/
void iMouse(int button, int state, int mx, int my)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		//place your codes here
		shootActivem();
		st2 = true;
	}
	if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
	{
		//place your codes here
	}
}
/*iPassiveMouseMove is called to detect and use
the mouse point without pressing any button */

void iPassiveMouseMove(int mx, int my)
{
	//place your code here

	mposx = mx;
	mposy = my;
	if (mx == 2){}        /*Something to do with mx*/
	else if (my == 2){}   /*Something to do with my*/

}

/*
function iKeyboard() is called whenever the user hits a key in keyboard.
key- holds the ASCII value of the key pressed.
*/
void iKeyboard(unsigned char key)
{
	if (key == 'd')
	{
		if (paddlePosition_X < screenWidth - paddleWidth)
		{
			paddlePosition_X += paddleSpeed;

			if (level == 3)
			{
				paddlePosition2_X += paddleSpeed;
				printf("%d\n%d", paddlePosition_X, paddlePosition2_X);
			}

			if (!gameOn)
			{
				ballPosition_X += paddleSpeed + 2;
			}
		}
	}
	else if (key == 'a')
	{
		if (paddlePosition_X > 5)
		{
			paddlePosition_X -= paddleSpeed;
			if (level == 3)
			{
				paddlePosition2_X -= paddleSpeed;
			}

			if (!gameOn)
			{
				ballPosition_X -= paddleSpeed + 2;
			}
		}

	}
	if (key == 'p')
	{
		iPauseTimer(0);
	}
	if (key == 'r')
	{
		iResumeTimer(0);
	}
	if (key == ' ')
	{
		gameOn = true;
	}
	if (key == 'i')
	{
		brick[0][0].showBrick = false;
	}
	if (key == 'j')
	{
		brick[2][1].showBrick = false;
	}
	if (key == 'l')
	{
		brick[0][1].showBrick = false;
	}
	if (key == 'k')
	{
		brick[0][2].showBrick = false;
	}
	if (key == 'o')
	{
		brick[0][3].showBrick = false;
	}
	if (key == 'b')
	{
		page++;
	}
	if (key == '=')
	{
		for (i = 0; i < brickRow; i++)
		{
			for (j = 0; j < brickCol; j++)
			{
				brick[i][j].showBrick = false;
			}
		}

	}
	//if (key == 'c')
	//{
	//	shootActivem();
	//	st2 = true;
	//}



	//place your codes for other keys here
}

/*
function iSpecialKeyboard() is called whenver user hits special keys like-
function keys, home, end, pg up, pg down, arraows etc. you have to use
appropriate constants to detect them. A list is:
GLUT_KEY_F1, GLUT_KEY_F2, GLUT_KEY_F3, GLUT_KEY_F4, GLUT_KEY_F5, GLUT_KEY_F6,
GLUT_KEY_F7, GLUT_KEY_F8, GLUT_KEY_F9, GLUT_KEY_F10, GLUT_KEY_F11, GLUT_KEY_F12,
GLUT_KEY_LEFT, GLUT_KEY_UP, GLUT_KEY_RIGHT, GLUT_KEY_DOWN, GLUT_KEY_PAGE UP,
GLUT_KEY_PAGE DOWN, GLUT_KEY_HOME, GLUT_KEY_END, GLUT_KEY_INSERT
*/
void iSpecialKeyboard(unsigned char key)
{

	if (key == GLUT_KEY_END)
	{
		exit(0);
	}
	//place your codes for other keys here
}
//
int main()
{
	brickActive();
	brickPattern();
	bulletActive();
	ballTimer = iSetTimer(25, ballMovememnt);

	levelTimer = iSetTimer(1000, timeControl);
	iPauseTimer(levelTimer);

	//place your own initialization codes here.
	iInitialize(screenWidth, screenHeight, name);
	return 0;
}